/**
 * Generated by orval v6.25.0 🍺
 * Do not edit manually.
 * Block list
 * OpenAPI spec version: 1.0.0
 */
import { type BodyType, createInstance } from './base-api-instance'

export type BlockListControllerGetListParams = {
  q?: string
}

export type AddBlockItemDtoType = (typeof AddBlockItemDtoType)[keyof typeof AddBlockItemDtoType]

// eslint-disable-next-line no-redeclare
export const AddBlockItemDtoType = {
  KeyWord: 'KeyWord',
  Website: 'Website',
} as const

export interface AddBlockItemDto {
  data: string
  type: AddBlockItemDtoType
}

export type BlockItemDtoType = (typeof BlockItemDtoType)[keyof typeof BlockItemDtoType]

// eslint-disable-next-line no-redeclare
export const BlockItemDtoType = {
  KeyWord: 'KeyWord',
  Website: 'Website',
} as const

export interface BlockItemDto {
  blockListId: number
  createdAt: string
  data: string
  id: number
  type: BlockItemDtoType
}

export interface BlockListDto {
  id: number
  items: BlockItemDto[]
  ownerId: number
}

export interface PatchAccountDto {
  isBlockingEnabled?: boolean
}

export interface AccountDto {
  id: number
  isBlockingEnabled: boolean
  ownerId: number
}

export interface GetSessionInfoDto {
  email: string
  exp: number
  iat: number
  id: number
}

export interface SignInBodyDto {
  email: string
  password: string
}

export interface SignUpBodyDto {
  email: string
  password: string
}

export interface HelloWorldDto {
  message: string
}

export const appControllerGetHello = () => {
  return createInstance<HelloWorldDto>({ method: 'GET', url: `/` })
}

export const authControllerSignUp = (signUpBodyDto: BodyType<SignUpBodyDto>) => {
  return createInstance<void>({
    data: signUpBodyDto,
    headers: { 'Content-Type': 'application/json' },
    method: 'POST',
    url: `/auth/sign-up`,
  })
}

export const authControllerSignIn = (signInBodyDto: BodyType<SignInBodyDto>) => {
  return createInstance<void>({
    data: signInBodyDto,
    headers: { 'Content-Type': 'application/json' },
    method: 'POST',
    url: `/auth/sign-in`,
  })
}

export const authControllerSignOut = () => {
  return createInstance<void>({ method: 'POST', url: `/auth/sign-out` })
}

export const authControllerGetSessionInfo = () => {
  return createInstance<GetSessionInfoDto>({ method: 'GET', url: `/auth/session` })
}

export const accountControllerGetAccount = () => {
  return createInstance<AccountDto>({ method: 'GET', url: `/account` })
}

export const accountControllerPatchAccount = (patchAccountDto: BodyType<PatchAccountDto>) => {
  return createInstance<AccountDto>({
    data: patchAccountDto,
    headers: { 'Content-Type': 'application/json' },
    method: 'PATCH',
    url: `/account`,
  })
}

export const blockListControllerGetList = (params?: BlockListControllerGetListParams) => {
  return createInstance<BlockListDto>({ method: 'GET', params, url: `/block-list` })
}

export const blockListControllerAddBlockItem = (addBlockItemDto: BodyType<AddBlockItemDto>) => {
  return createInstance<BlockItemDto>({
    data: addBlockItemDto,
    headers: { 'Content-Type': 'application/json' },
    method: 'POST',
    url: `/block-list/item`,
  })
}

export const blockListControllerRemoveBlockItem = (id: number) => {
  return createInstance<BlockItemDto>({ method: 'DELETE', url: `/block-list/item/${id}` })
}

export type AppControllerGetHelloResult = NonNullable<
  Awaited<ReturnType<typeof appControllerGetHello>>
>
export type AuthControllerSignUpResult = NonNullable<
  Awaited<ReturnType<typeof authControllerSignUp>>
>
export type AuthControllerSignInResult = NonNullable<
  Awaited<ReturnType<typeof authControllerSignIn>>
>
export type AuthControllerSignOutResult = NonNullable<
  Awaited<ReturnType<typeof authControllerSignOut>>
>
export type AuthControllerGetSessionInfoResult = NonNullable<
  Awaited<ReturnType<typeof authControllerGetSessionInfo>>
>
export type AccountControllerGetAccountResult = NonNullable<
  Awaited<ReturnType<typeof accountControllerGetAccount>>
>
export type AccountControllerPatchAccountResult = NonNullable<
  Awaited<ReturnType<typeof accountControllerPatchAccount>>
>
export type BlockListControllerGetListResult = NonNullable<
  Awaited<ReturnType<typeof blockListControllerGetList>>
>
export type BlockListControllerAddBlockItemResult = NonNullable<
  Awaited<ReturnType<typeof blockListControllerAddBlockItem>>
>
export type BlockListControllerRemoveBlockItemResult = NonNullable<
  Awaited<ReturnType<typeof blockListControllerRemoveBlockItem>>
>
